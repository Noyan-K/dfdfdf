generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DocumentTypeEnum {
  IMAGE
  FILE
}

model Document {
  id                   Int                    @id(map: "Documents_pk") @unique(map: "Documents_image_id_key") @default(autoincrement())
  url                  String
  type                 DocumentTypeEnum       @default(IMAGE)
  name                 String
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  deleted_at           DateTime?

  Order                Order[]
  ProductDocument      ProductDocument[]
  User                 User[]
}

model Supplier {
  id                                    Int                    @id(map: "Suppliers_pk") @unique(map: "Suppliers_supplier_id_key") @default(autoincrement())
  name                                  String
  deliver_goods_yourself                Boolean                @default(false)
  array_of_delivery_ids                 Int[]                  @default([])
  created_at                            DateTime               @default(now())
  updated_at                            DateTime               @updatedAt
  deleted_at                            DateTime?

  User                 User?
  Address              Address[]
}

enum DeliveryTypeEnum {
  USER
  SUPPLIER
}

model Delivery {
  id                              Int                    @id @default(autoincrement())
  name                            String                 @unique
  type                            DeliveryTypeEnum
  parent_id                       Int?
  created_at                      DateTime               @default(now())
  updated_at                      DateTime               @updatedAt
  deleted_at                      DateTime?

  Children                        Delivery[]             @relation(name: "DeliveryToDelivery")
  Parent                          Delivery?              @relation(name: "DeliveryToDelivery", fields: [parent_id], references: [id])
}

model Order {
  id                                    Int                    @id @default(autoincrement())
  document_id                           Int?
  cloth_sex                             ClothSexEnum
  product_id                            Int?
  custom_size                           String?                @db.VarChar(1024)
  custom_model                          String?                @db.VarChar(1024)
  custom_knot                           String?                @db.VarChar(1024)
  custom_textile                        String?                @db.VarChar(1024)
  additional_materials                  String?                @db.VarChar(1024)
  artistic_description                  String?                @db.VarChar(1024)
  created_at                            DateTime               @default(now())
  updated_at                            DateTime               @updatedAt
  deleted_at                            DateTime?

  Product                               Product?               @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_id")
  OrderSize                             OrderSize[]
  Document                              Document?              @relation(fields: [document_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "model_document_id_fk")
}

model Product {
  id                           Int                           @id @default(autoincrement())
  name                         String
  parent_id                    Int?
  mannequin                    MannequinPositionEnum?
  sex                          ClothSexEnum?
  description                  String?
  created_at                   DateTime                      @default(now())
  updated_at                   DateTime                      @updatedAt
  deleted_at                   DateTime?

  Children                     Product[]                    @relation(name: "ProductToProduct")
  Parent                       Product?                     @relation(name: "ProductToProduct", fields: [parent_id], references: [id])
  Order                        Order[]
  ProductDocument              ProductDocument[]
}

model ProductDocument {
  id                           Int                           @id @default(autoincrement())
  product_id                   Int
  document_id                  Int
  type                         DocumentTypeOfProductEnum
  created_at                   DateTime                      @default(now())
  updated_at                   DateTime                      @updatedAt
  deleted_at                   DateTime?

  Product                      Product                       @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_id")
  Document                     Document                      @relation(fields: [document_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "model_document_id_fk")

  @@unique([product_id, type])
}

enum DocumentTypeOfProductEnum {
  MANNEQUIN
  PREVIEW
}

enum MannequinPositionEnum {
  UP
  DOWN
  FULL
}

enum UserTypeEnum {
  USER
  GUEST
}

model User {
  id                       Int                    @id(map: "user_pk") @unique(map: "user_id_uindex") @default(autoincrement())
  name                     String
  user_name                String?                @unique
  email                    String                 @unique(map: "user_email_uindex")
  password                 String?
  type                     UserTypeEnum           @default(USER)
  document_id              Int?                   @unique
  supplier_id              Int?                   @unique
  array_of_delivery_ids    Int[]                  @default([])
  created_at               DateTime               @default(now())
  updated_at               DateTime               @updatedAt
  deleted_at               DateTime?

  Supplier                 Supplier?              @relation(fields: [supplier_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "supplier_id")
  UserRole                 UserRole[]
  Address                  Address[]
  Document                 Document?              @relation(fields: [document_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "model_document_id_fk")
}

model Address {
  id                             Int                    @id(map: "address_pk") @unique(map: "address_id_uindex") @default(autoincrement())
  user_id                        Int
  supplier_id                    Int?
  type                           AddressType            @default(DELIVERY)
  name                           String
  postcode                       Int?
  country                        String
  region                         String
  city                           String
  street                         String
  house_number                   Int
  apartment_number_or_office     Int?
  created_at                     DateTime               @default(now())
  updated_at                     DateTime               @updatedAt
  deleted_at                     DateTime?

  User                           User                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id")
  Supplier                       Supplier?              @relation(fields: [supplier_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "supplier_id")
}

enum AddressType {
  DELIVERY
  WAREHOUSE
}

model UserRole {
  id                   Int                    @id @default(autoincrement())
  user_id              Int
  role_name            RolesEnum              @default(USER)
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  deleted_at           DateTime?

  User                 User                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id")

  @@unique([user_id, role_name])
}

enum RolesEnum {
  ADMIN
  USER
}

enum ClothSexEnum {
  MALE
  FEMALE
  UNISEX
}

model Size {
  id                   Int                    @id @default(autoincrement())
  json                 Json
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  deleted_at           DateTime?

  OrderSize            OrderSize[]
}

model OrderSize {
  size_id              Int
  order_id             Int
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  deleted_at           DateTime?

  Order                Order                  @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_id")
  Size                 Size                   @relation(fields: [size_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "size_id")

  @@unique([order_id, size_id])
}
